{
  "hash": "bfa8f7e94b81128cfaff7e1ca5801a61",
  "result": {
    "markdown": "---\ntitle: \"Shrinkage verbs\"\nauthor: \"Daniel Kaplan\"\ndate: \"2023-05-06\"\ncategories: [reduction, ]\n---\n\n\n\n\nMuch of the time when we use `mutate()`, we are generating a new variable out of those already in the data frame. All sorts of mathematical and character transformations are available. For instance, the `KidsFeet` data frame records the length and width of 39 third- and fourth-grade children. If we would like to work with the aspect ratio of the feet, which is length divided by width, `mutate()` will do the work for us.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKidsFeet |> \n  mutate(aspect = length / width)\n```\n:::\n\n::: {#tbl-aspect-ratio .cell .tbl-cap-location-margin digits='2' tbl-cap='An example of `mutate()` with a transformation that works on each row individually.'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:right;\"> length </th>\n   <th style=\"text-align:right;\"> width </th>\n   <th style=\"text-align:right;\"> aspect </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 9.1 </td>\n   <td style=\"text-align:right;\"> 2.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 9.7 </td>\n   <td style=\"text-align:right;\"> 2.5 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 9.0 </td>\n   <td style=\"text-align:right;\"> 2.6 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 9.0 </td>\n   <td style=\"text-align:right;\"> 2.9 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 9.0 </td>\n   <td style=\"text-align:right;\"> 2.7 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\n\n\nThis Lesson introduces transformations of a different kind, some of which you are already familiar with. We will call these \"**shrinkage**\" transformations because, rather than dealing with the data frame rows one at a time, these transformations work on the rows collectively.\n\nPerhaps the simplest shrinkage transformation is averaging. An average, of course, combines (shrinks) many numerical values to give a single representative one. Two examples of averages are the **mean** and **median**.  When `mutate()` encounters a shrinkage transformation of this sort, it inserts the same value for all of the rows. You can think of mean or median as shrinking the range of values of its argument into a single number.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKidsFeet |> mutate(mean(length))\n```\n:::\n\n::: {#tbl-mean-len1 .cell .tbl-cap-location-margin digits='2' tbl-cap='Some shrinkage operators insert the same value for each row, reflecting the collective properties of all rows. '}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:right;\"> length </th>\n   <th style=\"text-align:right;\"> width </th>\n   <th style=\"text-align:right;\"> mean(length) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 9.1 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 9.7 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 9.0 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 9.0 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 9.0 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\n\n\nUsually, we prefer to give column names that are short and have no special characters. To accomplish this, use *named arguments* to `mutate()`. The names are up to you. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKidsFeet |> mutate(mlen = mean(length))\n```\n:::\n\n::: {#tbl-mean-len2 .cell .tbl-cap-location-margin digits='2' tbl-cap='Imposing a more concise column name using a named-argument syntax.'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:right;\"> length </th>\n   <th style=\"text-align:right;\"> mlen </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\n\n::: {.callout-note}\n## Rank of a variable\n\nTwo interesting shrinkage transforms with important uses in statistics are `rank()` and `percent_rank()`. These tell where each row would stand if the values had been sorted in ascending order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKidsFeet |> mutate(rank=rank(length), percentile=100*percent_rank(length))\n```\n:::\n\n::: {#tbl-mean-rank .cell .tbl-cap-location-margin digits='2' tbl-cap='`rank()` and percent_rank()` are very much the same, with `percent_rank()` scaling the results to fit into the range 0 to 1.'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:right;\"> length </th>\n   <th style=\"text-align:right;\"> rank </th>\n   <th style=\"text-align:right;\"> percentile </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 5.0 </td>\n   <td style=\"text-align:right;\"> 100 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 2.5 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 1.0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 4.0 </td>\n   <td style=\"text-align:right;\"> 75 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 2.5 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\n\nUnlike `mean()`, the `rank()` transformations do not insert the same value in each row. Still, the output values depend collectively on the values in the input. This is completely characteristic of a shrinkage transformation.\n:::\n\n## Groupwise operations\n\nThe `group_by()` wrangling verb sets up `mutate()` to use shrinkage transformations separately for each group. For instance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nKidsFeet |> \n  group_by(sex) |>\n  mutate(rank=rank(length))\n```\n:::\n\n::: {#tbl-grouped-rank .cell .tbl-cap-location-margin digits='2' tbl-cap='`group_by()` sets up `mutate()` to calulate shrinkage values group-by-group.'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"font-family: Courier; width: auto !important; \">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> sex </th>\n   <th style=\"text-align:right;\"> length </th>\n   <th style=\"text-align:right;\"> rank </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 3 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> B </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:right;\"> 26 </td>\n   <td style=\"text-align:right;\"> 2 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> G </td>\n   <td style=\"text-align:right;\"> 24 </td>\n   <td style=\"text-align:right;\"> 1 </td>\n  </tr>\n</tbody>\n</table>\n`````\n:::\n:::\n\n\nRank 1 appears twice in @tbl-grouped-rank, once for the girls and once for the both. Within both groups, rank 1 is assigned to the row with the smallest `length`.\n\nIn the [next Lesson](../Prelude-to-modeling.html) we will work extensively with groupwise means as a way of summarizing the similarities within a group and the differences between groups.\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}